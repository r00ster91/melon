{"repository_name":"github.com/r00ster91/melon","body":"# Melon\n\nA toolbox with useful methods and other stuff.\n\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://r00ster91.github.io/melon/)\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  melon:\n    github: r00ster91/melon\n```\n\n## Usage\n\n```Crystal\nrequire \"melon\"\n\n\"kayak\".palindrome? # => true\n\"hello\".to_binary # => [\"01101000\", \"01100101\", \"01101100\", \"01101100\", \"01101111\"]\n\"aVeryVeryGoodPassword567182\".password_strength # => 5\n'e' * 5 # => eeeee\n\nloop do\n  case Melon.read_keypress\n  when \"w\", :up\n    Melon::Cursor.move_up\n  when \"s\", :down\n    Melon::Cursor.move_down\n  when \"a\", :left\n    Melon::Cursor.move_right\n  when \"d\", :right\n    Melon::Cursor.move_left\n  when :enter, :space\n    break\n  end\nend\n```\n\n## Contributing\n\n1. Fork it (https://github.com/r00ster91/melon/fork)\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [r00ster91](https://github.com/r00ster91) - creator, maintainer\n","program":{"html_id":"github.com/r00ster91/melon/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/r00ster91/melon","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/r00ster91/melon/Char","path":"Char.html","kind":"struct","full_name":"Char","name":"Char","abstract":false,"superclass":{"html_id":"github.com/r00ster91/melon/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/r00ster91/melon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/r00ster91/melon/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/r00ster91/melon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"melon.cr","line_number":226,"url":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr"},{"filename":"melon.cr","line_number":317,"url":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/r00ster91/melon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Char` represents a [Unicode](http://en.wikipedia.org/wiki/Unicode) [code point](http://en.wikipedia.org/wiki/Code_point).\nIt occupies 32 bits.\n\nIt is created by enclosing an UTF-8 character in single quotes.\n\n```\n'a'\n'z'\n'0'\n'_'\n'„ÅÇ'\n```\n\nYou can use a backslash to denote some characters:\n\n```\n'\\'' # single quote\n'\\\\' # backslash\n'\\e' # escape\n'\\f' # form feed\n'\\n' # newline\n'\\r' # carriage return\n'\\t' # tab\n'\\v' # vertical tab\n```\n\nYou can use a backslash followed by at most three digits to denote a code point written in octal:\n\n```\n'\\101' # == 'A'\n'\\123' # == 'S'\n'\\12'  # == '\\n'\n'\\1'   # code point 1\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n'\\u0041' # == 'A'\n```\n\nOr you can use curly braces and specify up to four hexadecimal numbers:\n\n```\n'\\u{41}' # == 'A'\n```","summary":"<p>A <code><a href=\"Char.html\">Char</a></code> represents a <a href=\"http://en.wikipedia.org/wiki/Unicode\" target=\"_blank\">Unicode</a> <a href=\"http://en.wikipedia.org/wiki/Code_point\" target=\"_blank\">code point</a>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"*(times:Int)-instance-method","html_id":"*(times:Int)-instance-method","name":"*","doc":"Makes a new `String` by adding this Char to itself *times* times.","summary":"<p>Makes a new <code><a href=\"String.html\">String</a></code> by adding this Char to itself <em>times</em> times.</p>","abstract":false,"args":[{"name":"times","doc":null,"default_value":"","external_name":"times","restriction":"Int"}],"args_string":"(times : Int)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L228","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L228","def":{"name":"*","args":[{"name":"times","doc":null,"default_value":"","external_name":"times","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.to_s * other"}},{"id":"vowel?:Bool-instance-method","html_id":"vowel?:Bool-instance-method","name":"vowel?","doc":"Returns `true` if this Char is a vowel.","summary":"<p>Returns <code>true</code> if this Char is a vowel.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L319","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L319","def":{"name":"vowel?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"\"aeiou\".includes?(self.downcase)"}}],"macros":[],"types":[]},{"html_id":"github.com/r00ster91/melon/Melon","path":"Melon.html","kind":"module","full_name":"Melon","name":"Melon","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"melon.cr","line_number":3,"url":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"VERSION","value":"\"1.0.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"github.com/r00ster91/melon/Melon","kind":"module","full_name":"Melon","name":"Melon"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"m(&block)-instance-method","html_id":"m(&amp;block)-instance-method","name":"m","doc":"This is some kind of a multiline comment.\nYou can comment out code with it.\n```\nm {\n  # code you don't want to run\n}\n```","summary":"<p>This is some kind of a multiline comment.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L15","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L15","def":{"name":"m","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"if false\n  yield\nend"}},{"id":"printd(string:String,delay:Number=0.05)-instance-method","html_id":"printd(string:String,delay:Number=0.05)-instance-method","name":"printd","doc":"Prints each char of *string* with a delay to STDOUT.","summary":"<p>Prints each char of <em>string</em> with a delay to STDOUT.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"delay","doc":null,"default_value":"0.05","external_name":"delay","restriction":"Number"}],"args_string":"(string : String, delay : Number = <span class=\"n\">0.05</span>)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L20","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L20","def":{"name":"printd","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"delay","doc":null,"default_value":"0.05","external_name":"delay","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"string.each_char do |char|\n  print(char)\n  sleep(delay)\nend"}},{"id":"read_keypress:String|Symbol-instance-method","html_id":"read_keypress:String|Symbol-instance-method","name":"read_keypress","doc":"Same as `read_keypress_raw` except that this method returns the key more compact.\n- \"\\t\" becomes :tab\n- \" \" becomes :space\n- \"\\e\" becomes :escape\netc.","summary":"<p>Same as <code><a href=\"Melon.html#read_keypress_raw%3AString-instance-method\">#read_keypress_raw</a></code> except that this method returns the key more compact.</p>","abstract":false,"args":[],"args_string":" : String | Symbol","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L40","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L40","def":{"name":"read_keypress","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | Symbol","visibility":"Public","body":"case key = read_keypress_raw\nwhen \"\\r\", \"\\n\"\n  :enter\nwhen \"\\t\"\n  :tab\nwhen \" \"\n  :space\nwhen \"\\e\"\n  :escape\nwhen \"\\e[A\"\n  :up\nwhen \"\\e[B\"\n  :down\nwhen \"\\e[C\"\n  :right\nwhen \"\\e[D\"\n  :left\nelse\n  key.downcase\nend"}},{"id":"read_keypress_raw:String-instance-method","html_id":"read_keypress_raw:String-instance-method","name":"read_keypress_raw","doc":"Waits until a key has been pressed and returns it.","summary":"<p>Waits until a key has been pressed and returns it.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L28","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L28","def":{"name":"read_keypress_raw","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"STDIN.raw do |io|\n  buffer = Bytes.new(3)\n  String.new(buffer[0, io.read(buffer)])\nend"}},{"id":"selection(options:Array(String),type=1)-instance-method","html_id":"selection(options:Array(String),type=1)-instance-method","name":"selection","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":"Array(String)"},{"name":"type","doc":null,"default_value":"1","external_name":"type","restriction":""}],"args_string":"(options : Array(String), type = <span class=\"n\">1</span>)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L70","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L70","def":{"name":"selection","args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":"Array(String)"},{"name":"type","doc":null,"default_value":"1","external_name":"type","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (type != 1) || (type != 2)\n  raise(InvalidSelectionType.new(\"Selection type #{type} is invalid. Choose either 1 or 2\"))\nend\nselected = 0\noptions_size = options.size - 1\nputted = false\nloop do\n  if !putted\n    options.size.times do\n      puts\n    end\n    putted = true\n  end\n  Cursor.move_up(options.size)\n  options.each_with_index do |option, index|\n    puts(if selected == index\n      if type == 1\n        \">#{option}\"\n      else\n        if type == 2\n          option.colorize(:white)\n        end\n      end\n    else\n      if type == 1\n        \"#{option} \"\n      else\n        if type == 2\n          option.colorize(:dark_gray)\n        end\n      end\n    end)\n  end\n  loop do\n    case Melon.read_keypress\n    when :up, \"w\"\n      if selected == 0\n        selected = options_size\n      else\n        selected = selected - 1\n      end\n    when :down, \"s\"\n      if selected == options_size\n        selected = 0\n      else\n        selected = selected + 1\n      end\n    when :enter\n      return selected\n    else\n      next\n    end\n    break\n  end\nend\n"}}],"macros":[],"types":[{"html_id":"github.com/r00ster91/melon/Melon/Cursor","path":"Melon/Cursor.html","kind":"module","full_name":"Melon::Cursor","name":"Cursor","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"melon.cr","line_number":152,"url":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/r00ster91/melon/Melon/Cursor","kind":"module","full_name":"Melon::Cursor","name":"Cursor"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/r00ster91/melon/Melon","kind":"module","full_name":"Melon","name":"Melon"},"doc":"This module provides methods to control the terminal cursor.","summary":"<p>This module provides methods to control the terminal cursor.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"move_down(cells=1)-instance-method","html_id":"move_down(cells=1)-instance-method","name":"move_down","doc":null,"summary":null,"abstract":false,"args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"args_string":"(cells = <span class=\"n\">1</span>)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L167","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L167","def":{"name":"move_down","args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{cells}B\")"}},{"id":"move_left(cells=1)-instance-method","html_id":"move_left(cells=1)-instance-method","name":"move_left","doc":null,"summary":null,"abstract":false,"args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"args_string":"(cells = <span class=\"n\">1</span>)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L175","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L175","def":{"name":"move_left","args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{cells}C\")"}},{"id":"move_right(cells=1)-instance-method","html_id":"move_right(cells=1)-instance-method","name":"move_right","doc":null,"summary":null,"abstract":false,"args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"args_string":"(cells = <span class=\"n\">1</span>)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L171","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L171","def":{"name":"move_right","args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{cells}D\")"}},{"id":"move_up(cells=1)-instance-method","html_id":"move_up(cells=1)-instance-method","name":"move_up","doc":null,"summary":null,"abstract":false,"args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"args_string":"(cells = <span class=\"n\">1</span>)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L163","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L163","def":{"name":"move_up","args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{cells}A\")"}},{"id":"set_position(x,y)-instance-method","html_id":"set_position(x,y)-instance-method","name":"set_position","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L179","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L179","def":{"name":"set_position","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{y};#{x}H\")"}},{"id":"visible=(visible:Bool)-instance-method","html_id":"visible=(visible:Bool)-instance-method","name":"visible=","doc":"Shows or hides the cursor.\n```\nCursor.visible = false # The cursor is invisible now.\n```","summary":"<p>Shows or hides the cursor.</p>","abstract":false,"args":[{"name":"visible","doc":null,"default_value":"","external_name":"visible","restriction":"Bool"}],"args_string":"(visible : Bool)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L159","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L159","def":{"name":"visible=","args":[{"name":"visible","doc":null,"default_value":"","external_name":"visible","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print((visible ? \"\\e[?25h\" : \"\\e[?25l\"))"}}],"macros":[],"types":[]},{"html_id":"github.com/r00ster91/melon/Melon/InvalidSelectionType","path":"Melon/InvalidSelectionType.html","kind":"class","full_name":"Melon::InvalidSelectionType","name":"InvalidSelectionType","abstract":false,"superclass":{"html_id":"github.com/r00ster91/melon/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/r00ster91/melon/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/r00ster91/melon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/r00ster91/melon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"melon.cr","line_number":67,"url":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/r00ster91/melon/Melon","kind":"module","full_name":"Melon","name":"Melon"},"doc":"Raised when an invalid type has been specified at `selection`.\n```\nMelon.selection([\"Play\", \"Settings\", \"Quit\"], 4) # raises InvalidSelectionType\n```","summary":"<p>Raised when an invalid type has been specified at <code>selection</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/r00ster91/melon/Melon/Screen","path":"Melon/Screen.html","kind":"module","full_name":"Melon::Screen","name":"Screen","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"melon.cr","line_number":127,"url":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/r00ster91/melon/Melon/Screen","kind":"module","full_name":"Melon::Screen","name":"Screen"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/r00ster91/melon/Melon","kind":"module","full_name":"Melon","name":"Melon"},"doc":"This module provides methods to control the terminal screen.","summary":"<p>This module provides methods to control the terminal screen.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":"Clears the whole screen.","summary":"<p>Clears the whole screen.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L131","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L131","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\\e[2J\\e[3J\")"}},{"id":"clear_line-instance-method","html_id":"clear_line-instance-method","name":"clear_line","doc":"Clears the current line, the cursor is in.","summary":"<p>Clears the current line, the cursor is in.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L136","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L136","def":{"name":"clear_line","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\\e[2K\")"}},{"id":"scroll_down(lines)-instance-method","html_id":"scroll_down(lines)-instance-method","name":"scroll_down","doc":"Scrolls *lines* down.","summary":"<p>Scrolls <em>lines</em> down.</p>","abstract":false,"args":[{"name":"lines","doc":null,"default_value":"","external_name":"lines","restriction":""}],"args_string":"(lines)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L146","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L146","def":{"name":"scroll_down","args":[{"name":"lines","doc":null,"default_value":"","external_name":"lines","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{lines}T\")"}},{"id":"scroll_up(lines)-instance-method","html_id":"scroll_up(lines)-instance-method","name":"scroll_up","doc":"Scrolls *lines* up.","summary":"<p>Scrolls <em>lines</em> up.</p>","abstract":false,"args":[{"name":"lines","doc":null,"default_value":"","external_name":"lines","restriction":""}],"args_string":"(lines)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L141","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L141","def":{"name":"scroll_up","args":[{"name":"lines","doc":null,"default_value":"","external_name":"lines","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{lines}S\")"}}],"macros":[],"types":[]}]},{"html_id":"github.com/r00ster91/melon/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"github.com/r00ster91/melon/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/r00ster91/melon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/r00ster91/melon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/r00ster91/melon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"melon.cr","line_number":233,"url":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/r00ster91/melon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nString might end up being conformed of bytes which are an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but\ninvalid byte sequences, when asked as chars, will use the unicode replacement\nchar (value 0xFFFD). For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['ÔøΩ', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"-(other:String):String-instance-method","html_id":"-(other:String):String-instance-method","name":"-","doc":"Returns a new `String` with all occurrences of *other* removed.","summary":"<p>Returns a new <code><a href=\"String.html\">String</a></code> with all occurrences of <em>other</em> removed.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"args_string":"(other : String) : String","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L235","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L235","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"self.delete(other)"}},{"id":"/(other:String):Int-instance-method","html_id":"/(other:String):Int-instance-method","name":"/","doc":"Counts the occurrences of *other* in this String.","summary":"<p>Counts the occurrences of <em>other</em> in this String.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"args_string":"(other : String) : Int","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L240","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L240","def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"self.count(other)"}},{"id":"email?:Bool-instance-method","html_id":"email?:Bool-instance-method","name":"email?","doc":"Returns `true` if this String is a valid E-Mail.\nBut it doesn't checks if this E-Mail exists.","summary":"<p>Returns <code>true</code> if this String is a valid E-Mail.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L256","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L256","def":{"name":"email?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((/\\A[^@\\s]+@([^@\\s]+\\.)+[^@\\s]+\\z/).match(self)) != nil"}},{"id":"palindrome?:Bool-instance-method","html_id":"palindrome?:Bool-instance-method","name":"palindrome?","doc":"Returns `true` if this String is a palindrome.","summary":"<p>Returns <code>true</code> if this String is a palindrome.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L245","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L245","def":{"name":"palindrome?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self[0..(-((self.size / 2) + 1))] == self[(self.size / 2)..-1].reverse"}},{"id":"password_strength:Int32-instance-method","html_id":"password_strength:Int32-instance-method","name":"password_strength","doc":"Returns the password strength of this String.\n- 5 = very good\n- 4 = good\n- 3 = acceptable\n- 2 = bad\n- 1 = not acceptable","summary":"<p>Returns the password strength of this String.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L266","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L266","def":{"name":"password_strength","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"strength = 0\nif self.size < 4\n  return 1\nend\nif (/\\d/).match(self)\n  strength = strength + 1\nend\nif (/[A-Z]/).match(self)\n  strength = strength + 1\nend\nif (/[a-z]/).match(self)\n  strength = strength + 1\nend\nif self.size >= 8\n  strength = strength + 1\nend\nif self.size >= 16\n  strength = strength + 1\nend\nstrength\n"}},{"id":"to_binary:Array(String)-instance-method","html_id":"to_binary:Array(String)-instance-method","name":"to_binary","doc":"Converts this String to binary.","summary":"<p>Converts this String to binary.</p>","abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L290","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L290","def":{"name":"to_binary","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"binary = [] of String\nself.bytes.each do |byte|\n  binary << (String.build do |io|\n    8.times do\n      io << ((byte & 128) == 0 ? 0 : 1)\n      byte = byte << 1\n    end\n  end)\nend\nbinary\n"}},{"id":"to_cow_speech:String-instance-method","html_id":"to_cow_speech:String-instance-method","name":"to_cow_speech","doc":"Converts this String to cow speech.\nThis method allows you to communicate with cows.","summary":"<p>Converts this String to cow speech.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L305","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L305","def":{"name":"to_cow_speech","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  ((self.squeeze.strip(' ')).split(' ')).each_with_index do |word, index|\n    io << (word[0].uppercase? ? 'M' : 'm')\n    word.lchop.chars.each do |char|\n      io << (char.uppercase? ? 'O' : 'o')\n    end\n  end\nend"}},{"id":"username?:Bool-instance-method","html_id":"username?:Bool-instance-method","name":"username?","doc":"Returns `true` if this String is a valid username.","summary":"<p>Returns <code>true</code> if this String is a valid username.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L250","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L250","def":{"name":"username?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((/[A-Za-z0-9_]/).match(self)) != nil"}}],"macros":[],"types":[]},{"html_id":"github.com/r00ster91/melon/System","path":"System.html","kind":"module","full_name":"System","name":"System","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"melon.cr","line_number":185,"url":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/r00ster91/melon/System","kind":"module","full_name":"System","name":"System"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"architecture:Int32|Symbol-instance-method","html_id":"architecture:Int32|Symbol-instance-method","name":"architecture","doc":"Returns the architecture of the computer.","summary":"<p>Returns the architecture of the computer.</p>","abstract":false,"args":[],"args_string":" : Int32 | Symbol","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L208","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L208","def":{"name":"architecture","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | Symbol","visibility":"Public","body":"{% if (flag?(:x86_64)) || (flag?(:amd64)) %}\n      :64bit\n    {% else %}{% if (((flag?(:i686)) || (flag?(:i586))) || (flag?(:i486))) || (flag?(:i386)) %}\n      :32bit\n    {% else %}{% if flag?(:arm) %}\n      :arm\n    {% else %}\n      :unknown\n    {% end %}{% end %}{% end %}"}},{"id":"operating_system:Symbol-instance-method","html_id":"operating_system:Symbol-instance-method","name":"operating_system","doc":"Returns the operating system of the computer.","summary":"<p>Returns the operating system of the computer.</p>","abstract":false,"args":[],"args_string":" : Symbol","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L189","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L189","def":{"name":"operating_system","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":"{% if flag?(:linux) %}\n      :linux\n    {% else %}{% if flag?(:macos) %}\n      :macos\n    {% else %}{% if flag?(:openbsd) %}\n      :openbsd\n    {% else %}{% if flag?(:freebsd) %}\n      :freebsd\n    {% else %}{% if flag?(:darwin) %}\n      :darwin\n    {% else %}{% if flag?(:win32) %}\n      :win32\n    {% else %}\n      :unknown\n    {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}"}},{"id":"username:String-instance-method","html_id":"username:String-instance-method","name":"username","doc":"Returns the username of the current user.","summary":"<p>Returns the username of the current user.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L221","source_link":"https://github.com/r00ster91/melon/blob/20e66950763c4708aa269ccff5dc0160a8bda373/src/melon.cr#L221","def":{"name":"username","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"`whoami`"}}],"macros":[],"types":[]}]}}