{"repository_name":"github.com/r00ster91/melon","body":"# Melon\n\nA toolbox with useful methods and other stuff.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  melon:\n    github: r00ster91/melon\n```\n\n## Usage\n\n```crystal\nrequire \"melon\"\n```\n\nTODO: Write usage instructions here\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it ( https://github.com/r00ster91/melon/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [r00ster91](https://github.com/r00ster91) - creator, maintainer\n","program":{"html_id":"github.com/r00ster91/melon/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/r00ster91/melon","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"m(&block)-class-method","html_id":"m(&amp;block)-class-method","name":"m","doc":"This is a multiline comment.\nYou can easily comment out code with it.\n```\nm {\n\t  # code you don't want to run\n}\n```","summary":"<p>This is a multiline comment.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L25","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L25","def":{"name":"m","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"if false\n  yield\nend"}},{"id":"printd(string:String,delay:Number=0.05)-class-method","html_id":"printd(string:String,delay:Number=0.05)-class-method","name":"printd","doc":"Prints each char of *string* with a delay to STDOUT.","summary":"<p>Prints each char of <em>string</em> with a delay to STDOUT.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"delay","doc":null,"default_value":"0.05","external_name":"delay","restriction":"Number"}],"args_string":"(string : String, delay : Number = <span class=\"n\">0.05</span>)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L30","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L30","def":{"name":"printd","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"delay","doc":null,"default_value":"0.05","external_name":"delay","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"string.each_char do |char|\n  print(char)\n  sleep(delay)\nend"}},{"id":"wip-class-method","html_id":"wip-class-method","name":"wip","doc":"Use this in methods that are work in progress.","summary":"<p>Use this in methods that are work in progress.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L12","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L12","def":{"name":"wip","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(Melon::WIP.new)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/r00ster91/melon/Char","path":"Char.html","kind":"struct","full_name":"Char","name":"Char","abstract":false,"superclass":{"html_id":"github.com/r00ster91/melon/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/r00ster91/melon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/r00ster91/melon/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/r00ster91/melon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"melon.cr","line_number":200,"url":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr"},{"filename":"melon.cr","line_number":289,"url":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/r00ster91/melon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Char` represents a [Unicode](http://en.wikipedia.org/wiki/Unicode) [code point](http://en.wikipedia.org/wiki/Code_point).\nIt occupies 32 bits.\n\nIt is created by enclosing an UTF-8 character in single quotes.\n\n```\n'a'\n'z'\n'0'\n'_'\n'„ÅÇ'\n```\n\nYou can use a backslash to denote some characters:\n\n```\n'\\'' # single quote\n'\\\\' # backslash\n'\\e' # escape\n'\\f' # form feed\n'\\n' # newline\n'\\r' # carriage return\n'\\t' # tab\n'\\v' # vertical tab\n```\n\nYou can use a backslash followed by at most three digits to denote a code point written in octal:\n\n```\n'\\101' # == 'A'\n'\\123' # == 'S'\n'\\12'  # == '\\n'\n'\\1'   # code point 1\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n'\\u0041' # == 'A'\n```\n\nOr you can use curly braces and specify up to four hexadecimal numbers:\n\n```\n'\\u{41}' # == 'A'\n```","summary":"<p>A <code><a href=\"Char.html\">Char</a></code> represents a <a href=\"http://en.wikipedia.org/wiki/Unicode\" target=\"_blank\">Unicode</a> <a href=\"http://en.wikipedia.org/wiki/Code_point\" target=\"_blank\">code point</a>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"*(other:Int)-instance-method","html_id":"*(other:Int)-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Int"}],"args_string":"(other : Int)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L201","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L201","def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.to_s * other"}},{"id":"vowel?:Bool-instance-method","html_id":"vowel?:Bool-instance-method","name":"vowel?","doc":"Returns if this Char is a vowel.","summary":"<p>Returns if this Char is a vowel.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L291","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L291","def":{"name":"vowel?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"\"aeiou\".includes?(self.downcase)"}}],"macros":[],"types":[]},{"html_id":"github.com/r00ster91/melon/Cursor","path":"Cursor.html","kind":"module","full_name":"Cursor","name":"Cursor","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"melon.cr","line_number":84,"url":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/r00ster91/melon/Cursor","kind":"module","full_name":"Cursor","name":"Cursor"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"get_position-instance-method","html_id":"get_position-instance-method","name":"get_position","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L112","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L112","def":{"name":"get_position","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"wip"}},{"id":"move_back(cells=1)-instance-method","html_id":"move_back(cells=1)-instance-method","name":"move_back","doc":null,"summary":null,"abstract":false,"args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"args_string":"(cells = <span class=\"n\">1</span>)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L105","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L105","def":{"name":"move_back","args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{cells}D\")"}},{"id":"move_down(cells=1)-instance-method","html_id":"move_down(cells=1)-instance-method","name":"move_down","doc":null,"summary":null,"abstract":false,"args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"args_string":"(cells = <span class=\"n\">1</span>)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L99","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L99","def":{"name":"move_down","args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{cells}B\")"}},{"id":"move_forward(cells=1)-instance-method","html_id":"move_forward(cells=1)-instance-method","name":"move_forward","doc":null,"summary":null,"abstract":false,"args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"args_string":"(cells = <span class=\"n\">1</span>)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L102","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L102","def":{"name":"move_forward","args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{cells}C\")"}},{"id":"move_up(cells=1)-instance-method","html_id":"move_up(cells=1)-instance-method","name":"move_up","doc":null,"summary":null,"abstract":false,"args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"args_string":"(cells = <span class=\"n\">1</span>)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L96","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L96","def":{"name":"move_up","args":[{"name":"cells","doc":null,"default_value":"1","external_name":"cells","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{cells}A\")"}},{"id":"set_position(row,column)-instance-method","html_id":"set_position(row,column)-instance-method","name":"set_position","doc":null,"summary":null,"abstract":false,"args":[{"name":"row","doc":null,"default_value":"","external_name":"row","restriction":""},{"name":"column","doc":null,"default_value":"","external_name":"column","restriction":""}],"args_string":"(row, column)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L109","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L109","def":{"name":"set_position","args":[{"name":"row","doc":null,"default_value":"","external_name":"row","restriction":""},{"name":"column","doc":null,"default_value":"","external_name":"column","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{row};#{column}H\")"}},{"id":"visible=(visible:Bool)-instance-method","html_id":"visible=(visible:Bool)-instance-method","name":"visible=","doc":"Shows or hides the cursor.\n\n```\nCursor.visible = false # The cursor is invisible now.\n```","summary":"<p>Shows or hides the cursor.</p>","abstract":false,"args":[{"name":"visible","doc":null,"default_value":"","external_name":"visible","restriction":"Bool"}],"args_string":"(visible : Bool)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L92","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L92","def":{"name":"visible=","args":[{"name":"visible","doc":null,"default_value":"","external_name":"visible","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print((visible ? \"\\e[?25h\" : \"\\e[?25l\"))"}}],"macros":[],"types":[]},{"html_id":"github.com/r00ster91/melon/Melon","path":"Melon.html","kind":"module","full_name":"Melon","name":"Melon","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"melon.cr","line_number":1,"url":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"VERSION","value":"\"0.9.3\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/r00ster91/melon/Melon/WIP","path":"Melon/WIP.html","kind":"class","full_name":"Melon::WIP","name":"WIP","abstract":false,"superclass":{"html_id":"github.com/r00ster91/melon/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/r00ster91/melon/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/r00ster91/melon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/r00ster91/melon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"melon.cr","line_number":4,"url":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/r00ster91/melon/Melon","kind":"module","full_name":"Melon","name":"Melon"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L5","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L5","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/r00ster91/melon/Random","path":"Random.html","kind":"module","full_name":"Random","name":"Random","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"melon.cr","line_number":37,"url":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Random` provides an interface for random values generation, using a pseudo random number generator (PRNG).\n\n```\nRandom.new_seed # => 112705036\nRandom.rand     # => 0.167595\nRandom.rand(5)  # => 2\n```\n\nThe above methods delegate to a `Random` instance.\n\n```\nr = Random.new\nr.rand      # => 0.0372991\nr.next_bool # => true\nr.next_int  # => 2223112\n```\n\nThis module also defines a global method `#rand`, which `Array#sample` and `Array#shuffle` delegates.\n\n```\nrand     # => 0.293829\nrand(10) # => 8\n```\n\nAn instance of each class that includes `Random` is a random number generator with its own state.\nUsually such RNGs can be initialized with a seed, which defines their initial state. It is\nguaranteed that after initializing two different instances with the same seed, and then executing\nthe same calls on both of them, you will get the same results. This allows exactly reproducing the\nsame seemingly random events by just keeping the seed.\n\nIt is possible to make a custom RNG by including `Random` and implementing `next_u` to return an\nunsigned number of a pre-determined type (usually `UInt32`). The numbers generated by your RNG\nmust be uniformly distributed in the whole range of possible values for that type (e.g.\n`0u32..UInt32::MAX`). This allows all other methods of `Random` to be based on this and still\nproduce uniformly distributed results. Your `Random` class should also have a way to initialize\nit. For pseudo-random number generators that will usually be an integer seed, but there are no\nrigid requirements for the initialization.\n\nThe default PRNG is `Random::PCG32` which has a good overall statistical\ndistribution (low bias of generated numbers) and is fast for overall usages on\ndifferent platforms, but isn't cryptographically secure. If a third party has\naccess to some generated numbers, she may deduce incoming numbers, putting\nyour application at risk.\n\nIt is recommended to use a secure source, such as `Random::Secure`,\n`Random::ISAAC` or ChaCha20 for anything that needs security, such as online\ngames, identification tokens, salts, initializing a PRNG, ... These PRNG are\nslower but cryptographically secure, so a third party can't deduce incoming\nnumbers.","summary":"<p><code><a href=\"Random.html\">Random</a></code> provides an interface for random values generation, using a pseudo random number generator (PRNG).</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"next_string(length:Int):String-instance-method","html_id":"next_string(length:Int):String-instance-method","name":"next_string","doc":"Generates a random `String`.\n\n```\nRandom.new.next_string(5) # => 1hjg8\n```","summary":"<p>Generates a random <code><a href=\"String.html\">String</a></code>.</p>","abstract":false,"args":[{"name":"length","doc":null,"default_value":"","external_name":"length","restriction":"Int"}],"args_string":"(length : Int) : String","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L43","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L43","def":{"name":"next_string","args":[{"name":"length","doc":null,"default_value":"","external_name":"length","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  length.times do\n    io << (rand(256)).chr\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/r00ster91/melon/Screen","path":"Screen.html","kind":"module","full_name":"Screen","name":"Screen","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"melon.cr","line_number":118,"url":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/r00ster91/melon/Screen","kind":"module","full_name":"Screen","name":"Screen"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":"Clears the whole screen.","summary":"<p>Clears the whole screen.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L122","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L122","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\\e[3J\")"}},{"id":"clear_line-instance-method","html_id":"clear_line-instance-method","name":"clear_line","doc":"Clears the current line, the cursor is in.","summary":"<p>Clears the current line, the cursor is in.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L126","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L126","def":{"name":"clear_line","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\\e[2K\")"}},{"id":"read_keypress:String-instance-method","html_id":"read_keypress:String-instance-method","name":"read_keypress","doc":"Waits until a key has been pressed and returns it.","summary":"<p>Waits until a key has been pressed and returns it.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L140","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L140","def":{"name":"read_keypress","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"STDIN.raw do |io|\n  buffer = Bytes.new(3)\n  String.new(buffer[0, io.read(buffer)])\nend"}},{"id":"scroll_down(lines)-instance-method","html_id":"scroll_down(lines)-instance-method","name":"scroll_down","doc":"Scrolls *lines* down.","summary":"<p>Scrolls <em>lines</em> down.</p>","abstract":false,"args":[{"name":"lines","doc":null,"default_value":"","external_name":"lines","restriction":""}],"args_string":"(lines)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L135","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L135","def":{"name":"scroll_down","args":[{"name":"lines","doc":null,"default_value":"","external_name":"lines","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{lines}T\")"}},{"id":"scroll_up(lines)-instance-method","html_id":"scroll_up(lines)-instance-method","name":"scroll_up","doc":"Scrolls *lines* up.","summary":"<p>Scrolls <em>lines</em> up.</p>","abstract":false,"args":[{"name":"lines","doc":null,"default_value":"","external_name":"lines","restriction":""}],"args_string":"(lines)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L131","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L131","def":{"name":"scroll_up","args":[{"name":"lines","doc":null,"default_value":"","external_name":"lines","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\u001b[#{lines}S\")"}},{"id":"selection(options,type=1)-instance-method","html_id":"selection(options,type=1)-instance-method","name":"selection","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},{"name":"type","doc":null,"default_value":"1","external_name":"type","restriction":""}],"args_string":"(options, type = <span class=\"n\">1</span>)","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L147","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L147","def":{"name":"selection","args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},{"name":"type","doc":null,"default_value":"1","external_name":"type","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"selected = 0\noptions_size = options.size - 1\nputted = false\nloop do\n  if !putted\n    options.size.times do\n      puts\n    end\n    putted = true\n  end\n  Cursor.move_up(options.size)\n  options.each_with_index do |option, index|\n    puts(if selected == index\n      if type == 1\n        \">#{option}\"\n      else\n        if type == 2\n          option.colorize(:white)\n        end\n      end\n    else\n      if type == 1\n        \"#{option} \"\n      else\n        if type == 2\n          option.colorize(:dark_gray)\n        end\n      end\n    end)\n  end\n  loop do\n    case Console.read_keypress\n    when \"\\e[A\", \"w\", \"W\"\n      if selected == 0\n        selected = options_size\n      else\n        selected = selected - 1\n      end\n    when \"\\e[B\", \"s\", \"S\"\n      if selected == options_size\n        selected = 0\n      else\n        selected = selected + 1\n      end\n    when \"\\r\"\n      return selected\n    else\n      next\n    end\n    break\n  end\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/r00ster91/melon/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"github.com/r00ster91/melon/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/r00ster91/melon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/r00ster91/melon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/r00ster91/melon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"melon.cr","line_number":206,"url":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/r00ster91/melon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nString might end up being conformed of bytes which are an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but\ninvalid byte sequences, when asked as chars, will use the unicode replacement\nchar (value 0xFFFD). For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['ÔøΩ', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"-(other:String):String-instance-method","html_id":"-(other:String):String-instance-method","name":"-","doc":"Returns a new String with all occurrences of *other* removed.","summary":"<p>Returns a new String with all occurrences of <em>other</em> removed.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"args_string":"(other : String) : String","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L208","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L208","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"self.delete(other)"}},{"id":"/(other:String):Int-instance-method","html_id":"/(other:String):Int-instance-method","name":"/","doc":"Counts the occurrences of *other* in this String.","summary":"<p>Counts the occurrences of <em>other</em> in this String.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"args_string":"(other : String) : Int","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L213","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L213","def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"self.count(other)"}},{"id":"email?:Bool-instance-method","html_id":"email?:Bool-instance-method","name":"email?","doc":"Returns if this String is a valid E-Mail.\nBut it doesn't checks if this E-Mail exists.","summary":"<p>Returns if this String is a valid E-Mail.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L229","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L229","def":{"name":"email?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((/\\A[^@\\s]+@([^@\\s]+\\.)+[^@\\s]+\\z/).match(self)) != nil"}},{"id":"palindrome?:Bool-instance-method","html_id":"palindrome?:Bool-instance-method","name":"palindrome?","doc":"Returns if this String is a palindrome.","summary":"<p>Returns if this String is a palindrome.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L218","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L218","def":{"name":"palindrome?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self[0..(-((self.size / 2) + 1))] == self[(self.size / 2)..-1].reverse"}},{"id":"password_strength:Int32-instance-method","html_id":"password_strength:Int32-instance-method","name":"password_strength","doc":"Returns the password strength of this String.\n5 = very good\n4 = good\n3 = acceptable\n2 = bad\n1 = not acceptable","summary":"<p>Returns the password strength of this String.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L239","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L239","def":{"name":"password_strength","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"strength = 0\nif self.size < 4\n  return 1\nend\nif (/\\d/).match(self)\n  strength = strength + 1\nend\nif (/[A-Z]/).match(self)\n  strength = strength + 1\nend\nif (/[a-z]/).match(self)\n  strength = strength + 1\nend\nif self.size >= 8\n  strength = strength + 1\nend\nif self.size >= 16\n  strength = strength + 1\nend\nstrength\n"}},{"id":"to_binary:String-instance-method","html_id":"to_binary:String-instance-method","name":"to_binary","doc":"Converts this String to binary.","summary":"<p>Converts this String to binary.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L263","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L263","def":{"name":"to_binary","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  self.bytes.each do |byte|\n    8.times do\n      io << ((byte & 128) == 0 ? 0 : 1)\n      byte = byte << 1\n    end\n  end\nend"}},{"id":"to_cow_speech:String-instance-method","html_id":"to_cow_speech:String-instance-method","name":"to_cow_speech","doc":"Converts this String to cow speech.\nThis method allows you to communicate with cows.","summary":"<p>Converts this String to cow speech.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L276","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L276","def":{"name":"to_cow_speech","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  ((self.squeeze.strip(' ')).split(' ')).each_with_index do |word, index|\n    io << (word[0].uppercase? ? 'M' : 'm')\n    word.lchop.chars.each do |char|\n      io << (char.uppercase? ? 'O' : 'o')\n    end\n    io << ' '\n  end\nend"}},{"id":"username?:Bool-instance-method","html_id":"username?:Bool-instance-method","name":"username?","doc":"Returns if this String is a valid username.","summary":"<p>Returns if this String is a valid username.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L223","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L223","def":{"name":"username?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((/[A-Za-z0-9_]/).match(self)) != nil"}}],"macros":[],"types":[]},{"html_id":"github.com/r00ster91/melon/System","path":"System.html","kind":"module","full_name":"System","name":"System","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"melon.cr","line_number":50,"url":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr"}],"repository_name":"github.com/r00ster91/melon","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/r00ster91/melon/System","kind":"module","full_name":"System","name":"System"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"architecture:Int32|Symbol-instance-method","html_id":"architecture:Int32|Symbol-instance-method","name":"architecture","doc":"Returns the architecture of the system.","summary":"<p>Returns the architecture of the system.</p>","abstract":false,"args":[],"args_string":" : Int32 | Symbol","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L73","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L73","def":{"name":"architecture","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | Symbol","visibility":"Public","body":"{% if flag?(:x86_64) %}\n\t\t\t64\n\t\t{% else %}{% if flag?(:i686) %}\n\t\t\t32\n\t\t{% else %}\n\t\t\t:unknown\n\t\t{% end %}{% end %}"}},{"id":"os:Symbol-instance-method","html_id":"os:Symbol-instance-method","name":"os","doc":"Returns the operating system of the system.","summary":"<p>Returns the operating system of the system.</p>","abstract":false,"args":[],"args_string":" : Symbol","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L54","source_link":"https://github.com/r00ster91/melon/blob/537cae5ade1088c06e4eb616dd13976c8d234bb6/src/melon.cr#L54","def":{"name":"os","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":"{% if flag?(:win32) %}\n\t\t\t:win32\n\t\t{% else %}{% if flag?(:macos) %}\n\t\t\t:macos\n\t\t{% else %}{% if flag?(:openbsd) %}\n\t\t\t:openbsd\n\t\t{% else %}{% if flag?(:freebsd) %}\n\t\t\t:freebsd\n\t\t{% else %}{% if flag?(:darwin) %}\n\t\t\t:darwin\n\t\t{% else %}{% if flag?(:linux) %}\n\t\t\t:linux\n\t\t{% else %}\n\t\t\t:unknown\n\t\t{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}"}}],"macros":[],"types":[]}]}}